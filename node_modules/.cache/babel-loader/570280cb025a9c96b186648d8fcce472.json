{"ast":null,"code":"import _regeneratorRuntime from \"/Users/felex/Desktop/example-openweather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/felex/Desktop/example-openweather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/felex/Desktop/example-openweather/src/App.js\";\nimport React from \"react\";\nimport Heading from \"./components/Headings\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\"; // we created react component called App\n// class based component\n// render out the dom components to start with\n// then i created a getweather method in side i first give it API_CALL then convert it with json\n// and then take the values of the the input forms\n// After that i set the state defined and make sure that the values have be entered correctly if not it will return the error message\n//in the form i pass the prop getweather and set the function that will run every time wen the button is pressed (onSubmit) the the form component\n// in the weather component i render out the small (para) based on the props that if the props exist then the (para) will get rendered\n\nconst API_KEY = \"cce04279eb61723ecf6df32be4a71e86\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    var _this;\n\n    super(...args);\n    _this = this;\n    this.state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      timezone: undefined,\n      pressure: undefined,\n      error: undefined\n    };\n\n    this.getWeather = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        var city, country, api_call, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              city = e.target.elements.city.value;\n              country = e.target.elements.country.value;\n              _context.next = 5;\n              return fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \",\").concat(country, \"&APPID=\").concat(API_KEY));\n\n            case 5:\n              api_call = _context.sent;\n              _context.next = 8;\n              return api_call.json();\n\n            case 8:\n              data = _context.sent;\n\n              //console.log(data);\n              if (city && country) {\n                _this.setState({\n                  temperature: data.main.temp,\n                  city: data.name,\n                  country: data.sys.country,\n                  humidity: data.main.humidity,\n                  description: data.weather[0].description,\n                  timezone: data.timezone,\n                  error: \"\"\n                });\n              } else {\n                _this.setState({\n                  temperature: undefined,\n                  city: undefined,\n                  country: undefined,\n                  humidity: undefined,\n                  description: undefined,\n                  timezone: undefined,\n                  pressure: undefined,\n                  error: \"Please enter your current location.\"\n                });\n              }\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xs-6 title-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(Heading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xs-6 form-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      getWeather: this.getWeather,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Weather, {\n      temperature: this.state.temperature,\n      city: this.state.city,\n      country: this.state.country,\n      humidity: this.state.humidity,\n      description: this.state.description,\n      timezone: this.state.timezone,\n      error: this.state.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }\n    })))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/felex/Desktop/example-openweather/src/App.js"],"names":["React","Heading","Form","Weather","API_KEY","App","Component","state","temperature","undefined","city","country","humidity","description","timezone","pressure","error","getWeather","e","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","name","sys","weather","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Heading from \"./components/Headings\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\n// we created react component called App\n// class based component\n// render out the dom components to start with\n// then i created a getweather method in side i first give it API_CALL then convert it with json\n// and then take the values of the the input forms\n// After that i set the state defined and make sure that the values have be entered correctly if not it will return the error message\n//in the form i pass the prop getweather and set the function that will run every time wen the button is pressed (onSubmit) the the form component\n// in the weather component i render out the small (para) based on the props that if the props exist then the (para) will get rendered\n\n\n\nconst API_KEY = \"cce04279eb61723ecf6df32be4a71e86\";\n\nclass App extends React.Component {\n    state = {\n            temperature: undefined,\n            city: undefined,\n            country: undefined,\n            humidity: undefined,\n            description: undefined,\n            timezone: undefined,\n            pressure: undefined,\n            error: undefined\n        }\n\n    getWeather = async (e) => {\n        e.preventDefault();\n\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}`);\n        const data = await api_call.json();\n        //console.log(data);\n\n        if (city && country) {\n\n                this.setState({\n                temperature: data.main.temp,\n                city: data.name,\n                country: data.sys.country,\n                humidity: data.main.humidity,\n                description: data.weather[0].description,\n                timezone: data.timezone,\n                error: \"\"\n\n                });\n        } else {\n            this.setState({\n                temperature: undefined,\n                city: undefined,\n                country: undefined,\n                humidity: undefined,\n                description: undefined,\n                timezone: undefined,\n                pressure: undefined,\n                error: \"Please enter your current location.\"\n                });\n        }\n\n    }\n\n    render() {\n        return(\n            \n            <div>\n             <div className=\"wrapper\">\n              <div className=\"main\">\n               <div className=\"container\">\n                <div className=\"row\">\n                 <div className=\"col-xs-6 title-container\">\n                    <Heading />\n                  </div>\n                  <div className=\"col-xs-6 form-container\">\n                    <Form getWeather={this.getWeather} />\n\n                        <Weather \n                        temperature={this.state.temperature}\n                        city={this.state.city}\n                        country={this.state.country}\n                        humidity={this.state.humidity}\n                        description={this.state.description}\n                        timezone={this.state.timezone}\n                        error={this.state.error}\n                    />\n\n                </div>\n               </div>\n              </div>\n             </div> \n            </div>\n          </div>\n            \n\n        );\n    }\n} \n\nexport default App;\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}